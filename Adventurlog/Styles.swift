//
//  Styles.swift
//  AdventureLog
//
//  Created by Todd Isaacs on 1/29/18.
//  Copyright Â© 2018 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Styles : NSObject {

    //// Cache
  
    private struct Cache {
        static let boat: UIColor = UIColor(red: 0.140, green: 0.257, blue: 0.488, alpha: 1.000)
        static let outline: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var imageOfBoatIcon: UIImage?
        static var boatIconTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var boat: UIColor { return Cache.boat }
    @objc dynamic public class var outline: UIColor { return Cache.outline }

    //// Drawing Methods

    @objc dynamic public class func drawBoatIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 400, height: 412), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 400, height: 412), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 400, y: resizedFrame.height / 412)


        //// Color Declarations
        let color = UIColor(red: 0.979, green: 0.972, blue: 0.972, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8.5, y: 339.12))
        bezierPath.addCurve(to: CGPoint(x: 36.85, y: 372.75), controlPoint1: CGPoint(x: 8.5, y: 339.12), controlPoint2: CGPoint(x: 23.79, y: 360.69))
        bezierPath.addCurve(to: CGPoint(x: 59.73, y: 387.37), controlPoint1: CGPoint(x: 49.91, y: 384.81), controlPoint2: CGPoint(x: 59.73, y: 387.37))
        bezierPath.addCurve(to: CGPoint(x: 75.65, y: 394.19), controlPoint1: CGPoint(x: 59.73, y: 387.37), controlPoint2: CGPoint(x: 66.45, y: 390.78))
        bezierPath.addCurve(to: CGPoint(x: 99.62, y: 401), controlPoint1: CGPoint(x: 84.85, y: 397.6), controlPoint2: CGPoint(x: 94.64, y: 400.03))
        bezierPath.addCurve(to: CGPoint(x: 323, y: 401), controlPoint1: CGPoint(x: 104.59, y: 401.97), controlPoint2: CGPoint(x: 309.94, y: 403.5))
        bezierPath.addCurve(to: CGPoint(x: 341, y: 394), controlPoint1: CGPoint(x: 336.06, y: 398.5), controlPoint2: CGPoint(x: 341, y: 394))
        bezierPath.addLine(to: CGPoint(x: 353, y: 385))
        bezierPath.addLine(to: CGPoint(x: 365, y: 373))
        bezierPath.addLine(to: CGPoint(x: 377.57, y: 356.67))
        bezierPath.addLine(to: CGPoint(x: 390.5, y: 339.12))
        bezierPath.addLine(to: CGPoint(x: 287.04, y: 339.12))
        bezierPath.addLine(to: CGPoint(x: 269.14, y: 324.5))
        bezierPath.addLine(to: CGPoint(x: 158.71, y: 324.5))
        bezierPath.addLine(to: CGPoint(x: 154.73, y: 339.12))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 339.12))
        bezierPath.close()
        Styles.boat.setFill()
        bezierPath.fill()
        Styles.outline.setStroke()
        bezierPath.lineWidth = 6
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 237.95, y: 8))
        bezier3Path.addCurve(to: CGPoint(x: 390.95, y: 339), controlPoint1: CGPoint(x: 393.95, y: 333), controlPoint2: CGPoint(x: 390.95, y: 339))
        bezier3Path.addCurve(to: CGPoint(x: 257.39, y: 302.93), controlPoint1: CGPoint(x: 390.95, y: 339), controlPoint2: CGPoint(x: 263.69, y: 313.64))
        bezier3Path.addCurve(to: CGPoint(x: 265.06, y: 297.68), controlPoint1: CGPoint(x: 255.81, y: 300.25), controlPoint2: CGPoint(x: 259.46, y: 299.21))
        bezier3Path.addCurve(to: CGPoint(x: 237.95, y: 12), controlPoint1: CGPoint(x: 310.72, y: 285.15), controlPoint2: CGPoint(x: 237.95, y: 12))
        color.setFill()
        bezier3Path.fill()
        Styles.outline.setStroke()
        bezier3Path.lineWidth = 6
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 238, y: 288))
        bezier4Path.addLine(to: CGPoint(x: 20, y: 288))
        bezier4Path.addLine(to: CGPoint(x: 238, y: 8))
        color.setFill()
        bezier4Path.fill()
        Styles.outline.setStroke()
        bezier4Path.lineWidth = 6
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 237.5, y: 323.5))
        bezier2Path.addLine(to: CGPoint(x: 238, y: 8))
        Styles.outline.setStroke()
        bezier2Path.lineWidth = 6
        bezier2Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 274.03, y: 340.5))
        bezier5Path.addLine(to: CGPoint(x: 223.91, y: 341.33))
        bezier5Path.addCurve(to: CGPoint(x: 223.04, y: 332.15), controlPoint1: CGPoint(x: 223.91, y: 341.33), controlPoint2: CGPoint(x: 222.89, y: 332.15))
        bezier5Path.addCurve(to: CGPoint(x: 265.89, y: 331.55), controlPoint1: CGPoint(x: 223.2, y: 332.15), controlPoint2: CGPoint(x: 265.89, y: 331.55))
        bezier5Path.addLine(to: CGPoint(x: 274.03, y: 340.5))
        bezier5Path.close()
        Styles.outline.setFill()
        bezier5Path.fill()
        Styles.outline.setStroke()
        bezier5Path.lineWidth = 6
        bezier5Path.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfBoatIcon: UIImage {
        if Cache.imageOfBoatIcon != nil {
            return Cache.imageOfBoatIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 400, height: 412), false, 0)
            Styles.drawBoatIcon()

        Cache.imageOfBoatIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfBoatIcon!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var boatIconTargets: [AnyObject]! {
        get { return Cache.boatIconTargets }
        set {
            Cache.boatIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: Styles.imageOfBoatIcon)
            }
        }
    }




    @objc(StylesResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
