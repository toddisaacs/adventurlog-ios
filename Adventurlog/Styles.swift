//
//  Styles.swift
//  AdventureLog
//
//  Created by Todd Isaacs on 3/29/18.
//  Copyright Â© 2018 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Styles : NSObject {

    //// Cache

    private struct Cache {
        static let boat: UIColor = UIColor(red: 0.140, green: 0.257, blue: 0.488, alpha: 1.000)
        static let outline: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var boat: UIColor { return Cache.boat }
    @objc dynamic public class var outline: UIColor { return Cache.outline }

    //// Drawing Methods

    @objc dynamic public class func drawBoatIcon(frame: CGRect = CGRect(x: 0, y: 0, width: 400, height: 412), selected: Bool = false, strokeWidth: CGFloat = 6) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let color = UIColor(red: 0.979, green: 0.972, blue: 0.972, alpha: 1.000)
        let boatSelected = UIColor(red: 0.216, green: 0.545, blue: 0.180, alpha: 1.000)

        //// Variable Declarations
        let colorOfBoat = selected ? boatSelected : Styles.boat


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 8.55, y: frame.minY + 9.79, width: fastFloor((frame.width - 8.55) * 0.97703 + 9.05) - 8.55, height: fastFloor((frame.height - 9.79) * 0.96557 + 10.14) - 9.64)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.85261 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.07413 * group.width, y: group.minY + 0.92375 * group.height), controlPoint1: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.85261 * group.height), controlPoint2: CGPoint(x: group.minX + 0.03999 * group.width, y: group.minY + 0.89269 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.13396 * group.width, y: group.minY + 0.96140 * group.height), controlPoint1: CGPoint(x: group.minX + 0.10827 * group.width, y: group.minY + 0.95481 * group.height), controlPoint2: CGPoint(x: group.minX + 0.13396 * group.width, y: group.minY + 0.96140 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.17557 * group.width, y: group.minY + 0.97896 * group.height), controlPoint1: CGPoint(x: group.minX + 0.13396 * group.width, y: group.minY + 0.96140 * group.height), controlPoint2: CGPoint(x: group.minX + 0.15151 * group.width, y: group.minY + 0.97018 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.23824 * group.width, y: group.minY + 0.99649 * group.height), controlPoint1: CGPoint(x: group.minX + 0.19963 * group.width, y: group.minY + 0.98775 * group.height), controlPoint2: CGPoint(x: group.minX + 0.22523 * group.width, y: group.minY + 0.99398 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.82232 * group.width, y: group.minY + 0.99649 * group.height), controlPoint1: CGPoint(x: group.minX + 0.25124 * group.width, y: group.minY + 0.99900 * group.height), controlPoint2: CGPoint(x: group.minX + 0.78818 * group.width, y: group.minY + 1.00294 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.86939 * group.width, y: group.minY + 0.97847 * group.height), controlPoint1: CGPoint(x: group.minX + 0.85646 * group.width, y: group.minY + 0.99005 * group.height), controlPoint2: CGPoint(x: group.minX + 0.86939 * group.width, y: group.minY + 0.97847 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.90076 * group.width, y: group.minY + 0.95529 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.93214 * group.width, y: group.minY + 0.92439 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.96500 * group.width, y: group.minY + 0.88234 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.99881 * group.width, y: group.minY + 0.85261 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.72830 * group.width, y: group.minY + 0.85261 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.68148 * group.width, y: group.minY + 0.81496 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39276 * group.width, y: group.minY + 0.81496 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.38236 * group.width, y: group.minY + 0.85261 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.85261 * group.height))
        bezierPath.close()
        colorOfBoat.setFill()
        bezierPath.fill()
        Styles.outline.setStroke()
        bezierPath.lineWidth = strokeWidth
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: group.minX + 0.59994 * group.width, y: group.minY + 0.00000 * group.height))
        bezier3Path.addCurve(to: CGPoint(x: group.minX + 0.99999 * group.width, y: group.minY + 0.85230 * group.height), controlPoint1: CGPoint(x: group.minX + 1.00783 * group.width, y: group.minY + 0.83685 * group.height), controlPoint2: CGPoint(x: group.minX + 0.99999 * group.width, y: group.minY + 0.85230 * group.height))
        bezier3Path.addCurve(to: CGPoint(x: group.minX + 0.65077 * group.width, y: group.minY + 0.75942 * group.height), controlPoint1: CGPoint(x: group.minX + 0.99999 * group.width, y: group.minY + 0.85230 * group.height), controlPoint2: CGPoint(x: group.minX + 0.66725 * group.width, y: group.minY + 0.78699 * group.height))
        bezier3Path.addCurve(to: CGPoint(x: group.minX + 0.67082 * group.width, y: group.minY + 0.74589 * group.height), controlPoint1: CGPoint(x: group.minX + 0.64665 * group.width, y: group.minY + 0.75253 * group.height), controlPoint2: CGPoint(x: group.minX + 0.65619 * group.width, y: group.minY + 0.74984 * group.height))
        bezier3Path.addCurve(to: CGPoint(x: group.minX + 0.59994 * group.width, y: group.minY + 0.01030 * group.height), controlPoint1: CGPoint(x: group.minX + 0.79022 * group.width, y: group.minY + 0.71363 * group.height), controlPoint2: CGPoint(x: group.minX + 0.59994 * group.width, y: group.minY + 0.01030 * group.height))
        color.setFill()
        bezier3Path.fill()
        Styles.outline.setStroke()
        bezier3Path.lineWidth = strokeWidth
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: group.minX + 0.60007 * group.width, y: group.minY + 0.72098 * group.height))
        bezier4Path.addLine(to: CGPoint(x: group.minX + 0.03007 * group.width, y: group.minY + 0.72098 * group.height))
        bezier4Path.addLine(to: CGPoint(x: group.minX + 0.60007 * group.width, y: group.minY + 0.00000 * group.height))
        color.setFill()
        bezier4Path.fill()
        Styles.outline.setStroke()
        bezier4Path.lineWidth = strokeWidth
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: group.minX + 0.59877 * group.width, y: group.minY + 0.81239 * group.height))
        bezier2Path.addLine(to: CGPoint(x: group.minX + 0.60007 * group.width, y: group.minY + 0.00000 * group.height))
        Styles.outline.setStroke()
        bezier2Path.lineWidth = strokeWidth
        bezier2Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: group.minX + 0.69428 * group.width, y: group.minY + 0.85615 * group.height))
        bezier5Path.addLine(to: CGPoint(x: group.minX + 0.56323 * group.width, y: group.minY + 0.85829 * group.height))
        bezier5Path.addCurve(to: CGPoint(x: group.minX + 0.56097 * group.width, y: group.minY + 0.83467 * group.height), controlPoint1: CGPoint(x: group.minX + 0.56323 * group.width, y: group.minY + 0.85829 * group.height), controlPoint2: CGPoint(x: group.minX + 0.56056 * group.width, y: group.minY + 0.83467 * group.height))
        bezier5Path.addCurve(to: CGPoint(x: group.minX + 0.67299 * group.width, y: group.minY + 0.83313 * group.height), controlPoint1: CGPoint(x: group.minX + 0.56138 * group.width, y: group.minY + 0.83467 * group.height), controlPoint2: CGPoint(x: group.minX + 0.67299 * group.width, y: group.minY + 0.83313 * group.height))
        bezier5Path.addLine(to: CGPoint(x: group.minX + 0.69428 * group.width, y: group.minY + 0.85615 * group.height))
        bezier5Path.close()
        Styles.outline.setFill()
        bezier5Path.fill()
        Styles.outline.setStroke()
        bezier5Path.lineWidth = strokeWidth
        bezier5Path.stroke()
    }

    @objc dynamic public class func drawPlacemarker(frame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 29)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let color2 = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 1, y: frame.minY + 1, width: fastFloor((frame.width - 1) * 0.92857 + 0.5), height: fastFloor((frame.height - 1) * 0.92857 + 0.5)))
        color2.setFill()
        ovalPath.fill()
    }

    //// Generated Images

    @objc dynamic public class func imageOfBoatIcon(imageSize: CGSize = CGSize(width: 400, height: 412), selected: Bool = false, strokeWidth: CGFloat = 6) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Styles.drawBoatIcon(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), selected: selected, strokeWidth: strokeWidth)

        let imageOfBoatIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBoatIcon
    }

    @objc dynamic public class func imageOfPlacemarker(imageSize: CGSize = CGSize(width: 29, height: 29)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Styles.drawPlacemarker(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height))

        let imageOfPlacemarker = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPlacemarker
    }

}
